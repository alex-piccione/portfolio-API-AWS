# This file is used to  

# syntax ref.: https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: Portfolio-FSharp
configValidationMode: error

provider:
  name: aws
  runtime: dotnet6
  stackName: Portfolio-FSharp # CloudFormation stack name
  apiName: Portfolio-FSharp.2021 # API Gateway name  
  deploymentBucket:
    name: portfolio.api.fsharp-functions
  memorySize: 512
  lambdaHashingVersion: "20201221"

  #apiGateway:
  #  restApiId: portfolio-fsharp-2021
  # The CloudFormation template is invalid: Template error: instance of Fn::GetAtt references undefined resource ApiGatewayRestApi

  environment:
    functionCurrencyPrefix: "Portfolio.Api::Portfolio.Api.Functions.Currency"  
    # variable = Assembly::Namespace.Class  (concatenate .Class::Method to get the handler)
    userFunctions: "Portfolio.Api::Portfolio.Api.Functions.UserFunctions"  
    currencyFunctions: "Portfolio.Api::Portfolio.Api.Functions.CurrencyFunctions"  
    companyFunctions: "Portfolio.Api::Portfolio.Api.Functions.CompanyFunctions"  
    balanceFunctions: "Portfolio.Api::Portfolio.Api.Functions.BalanceFunctions"
    fundFunctions: "Portfolio.Api::Portfolio.Api.Functions.FundFunctions"

package:
  individually: true

functions:
  # User
  UserCreate:
    handler: ${self:provider.environment.userFunctions}::Create  # assembly::namespace.class::method
    package: &package
      artifact: "FSharp project/publish/fsharp-functions.zip"
    events:
    - http:
        method: POST
        path: user
        cors: true

  UserSingle:
    handler: ${self:provider.environment.userFunctions}::Single 
    package: 
      <<: *package
    events:
    - http:
        method: GET
        path: user/{email}
        cors: true
  
  UserUpdate:
    handler: ${self:provider.environment.userFunctions}::Update 
    package: 
      <<: *package
    events:
    - http:
        method: PUT
        path: user
        cors: true

  UserDelete:
    handler: ${self:provider.environment.userFunctions}::Delete 
    package: 
      <<: *package
    events:
    - http:
        method: DELETE
        path: user/{email}
        cors: true

  UserAll:
    handler: ${self:provider.environment.userFunctions}::All
    package: 
      <<: *package
    events:
    - http:
        method: GET
        path: user/all
        cors: true
  
  UserLogin:
    handler: ${self:provider.environment.userFunctions}::Login
    package: 
      <<: *package
    events:
    - http:
        method: POST
        path: user/login
        cors: true

  #UserCleanupExpiredSessions:
  #  handler: ${self:provider.environment.userFunctions}::ClenupExpiredSessions
  #  package: 
  #    <<: *package
  #  events:
  #  - schedule: cron(15 * * * * *)
  #    # cron(Minutes Hours Day-of-month Month Day-of-week Year)

  # Currency
  CurrencyCreate:
    handler: ${self:provider.environment.currencyFunctions}::Create  # assembly::namespace.class::method
    package: 
      <<: *package
    events:
    - http:
        method: POST
        path: currency
        cors: true

  CurrencyRead:
    handler: ${self:provider.environment.currencyFunctions}::Read
    package: 
      <<: *package
    events:
    - http:
        method: GET
        path: currency
        cors: true
        #authorizer: aws_iam

  # Company
  Company-Create:
    handler: ${self:provider.environment.companyFunctions}::Create
    package: 
      <<: *package
    events:
    - http:
        method: POST
        path: company
        cors: true
        #authorizer: aws_iam

  Company-Read:
    handler: ${self:provider.environment.companyFunctions}::Read
    package:
      <<: *package
    events:
    - http:
        method: GET
        path: company
        cors: true
        #authorizer: aws_iam

  Company-Update:
    handler: ${self:provider.environment.companyFunctions}::Update
    package:
      <<: *package
    events:
    - http:
        method: PUT
        path: company
        cors: true
        #authorizer: aws_iam

  Company-Delete:
    handler: ${self:provider.environment.companyFunctions}::Delete
    package:
      <<: *package
    events:
    - http:
        method: DELETE
        path: company/{id}
        cors: true
        #authorizer: aws_iam

  # Balance
  Balance-Get:
    #name: "GET Balance"
    handler: ${self:provider.environment.balanceFunctions}::Get
    package: 
      <<: *package
    timeout: 30
    memorySize: 1024
    events:
    - http:
        method: GET
        path: balance
        cors: true
        #request:
        #  template:
        #    application/json: '{"base-currency": "$input.params(''base-currency'')"}'

  Balance-UpdateFund:
    handler: ${self:provider.environment.balanceFunctions}::Update
    package:
      <<: *package
    events:
    - http:
        method: PUT
        path: balance/update
        cors: true

  # Fund (under balance fuctions)
  Fund-GetForCurrency:
    handler: ${self:provider.environment.fundFunctions}::GetFund
    package: 
      <<: *package
    events:
    - http:
        method: GET
        path: fund
        cors: true