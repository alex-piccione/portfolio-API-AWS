# syntax ref.: https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: Portfolio-FSharp
configValidationMode: error

provider:
  name: aws
  runtime: dotnetcore3.1
  stackName: Portfolio-FSharp # CloudFormation stack name
  apiName: Portfolio-FSharp.2021 # API Gateway name  
  deploymentBucket:
    name: portfolio.api.fsharp-functions
  memorySize: 512
  lambdaHashingVersion: "20201221"

  #apiGateway:
  #  restApiId: portfolio-fsharp-2021
  # The CloudFormation template is invalid: Template error: instance of Fn::GetAtt references undefined resource ApiGatewayRestApi

  environment:
    functionCurrencyPrefix: "Portfolio.Api::Portfolio.Api.Functions.Currency"  # Assembly::Namespace prefix, concatenate .Class::Method
    userFunctions: "Portfolio.Api::Portfolio.Api.Functions.UserFunctions"  # Assembly::Namespace prefix, concatenate .Class::Method
    currencyFunctions: "Portfolio.Api::Portfolio.Api.Functions.CurrencyFunctions"  # Assembly::Namespace prefix, concatenate .Class::Method

package:
  individually: true

functions:
  # User
  UserCreate:
    handler: ${self:provider.environment.userFunctions}::Create  # assembly::namespace.class::method
    package: &package
      artifact: "FSharp project/publish/fsharp-functions.zip"
    events:
    - http:
        method: POST
        path: user
        cors: true

  UserSingle:
    handler: ${self:provider.environment.userFunctions}::Single 
    package: 
      <<: *package
    events:
    - http:
        method: GET
        path: user/{email}
        cors: true
  
  UserUpdate:
    handler: ${self:provider.environment.userFunctions}::Update 
    package: 
      <<: *package
    events:
    - http:
        method: PUT
        path: user
        cors: true

  UserDelete:
    handler: ${self:provider.environment.userFunctions}::Delete 
    package: 
      <<: *package
    events:
    - http:
        method: DELETE
        path: user/{email}
        cors: true

  UserAll:
    handler: ${self:provider.environment.userFunctions}::All
    package: 
      <<: *package
    events:
    - http:
        method: GET
        path: user/all
        cors: true
  
  UserLogin:
    handler: ${self:provider.environment.userFunctions}::Login
    package: 
      <<: *package
    events:
    - http:
        method: POST
        path: user/login
        cors: true

  #UserCleanupExpiredSessions:
  #  handler: ${self:provider.environment.userFunctions}::ClenupExpiredSessions
  #  package: 
  #    <<: *package
  #  events:
  #  - schedule: cron(15 * * * * *)
  #    # cron(Minutes Hours Day-of-month Month Day-of-week Year)

  # Currency
  CurrencyCreate:
    handler: ${self:provider.environment.currencyFunctions}::Create  # assembly::namespace.class::method
    package: 
      <<: *package
    events:
    - http:
        method: GET
        path: currency/all
        cors: true

  CurrencySingle:
    handler: ${self:provider.environment.currencyFunctions}::Single
    package:
      <<: *package
    events:
    - http:
        method: GET
        path: currency
        cors: true
        request:
          template:
            application/json: '{"code": "$input.params(''code'')"}'

            # Update

            # Delete

  CurrencyAll:
    handler: ${self:provider.environment.currencyFunctions}::All
    package: 
      <<: *package
    events:
    - http:
        method: GET
        path: currency/all
        cors: true